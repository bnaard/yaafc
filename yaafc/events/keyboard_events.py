import dataclasses

import reflex as rx


# KeyboardEvent: https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent
@dataclasses.dataclass
class KeyboardEvent:
    """Represents events that occur due to the user interacting with a keyboard."""

    altKey: bool = False  # True if Alt key was pressed
    code: str = ""  # Physical key code
    ctrlKey: bool = False  # True if Ctrl key was pressed
    isComposing: bool = False  # True if event is part of IME composition
    key: str = ""  # Value of the key pressed
    location: int = 0  # Location of the key on the device
    metaKey: bool = False  # True if Meta (Cmd) key was pressed
    repeat: bool = False  # True if key is being held down
    shiftKey: bool = False  # True if Shift key was pressed


def keyboard_event_spec(ev: rx.Var[KeyboardEvent]) -> tuple[rx.Var[KeyboardEvent]]:
    return (
        rx.Var.create(
            KeyboardEvent(
                altKey=ev.altKey,
                code=ev.code,
                ctrlKey=ev.ctrlKey,
                isComposing=ev.isComposing,
                key=ev.key,
                location=ev.location,
                metaKey=ev.metaKey,
                repeat=ev.repeat,
                shiftKey=ev.shiftKey,
            )
        ),
    )


@dataclasses.dataclass
class KeyDownEvent(KeyboardEvent):
    """Represents a keydown event."""

    pass


def key_down_event_spec(ev: rx.Var[KeyDownEvent]) -> tuple[rx.Var[KeyDownEvent]]:
    return (rx.Var.create(KeyDownEvent(**dataclasses.asdict(keyboard_event_spec(ev)[0].get()))),)


@dataclasses.dataclass
class KeyUpEvent(KeyboardEvent):
    """Represents a keyup event."""

    pass


def key_up_event_spec(ev: rx.Var[KeyUpEvent]) -> tuple[rx.Var[KeyUpEvent]]:
    return (rx.Var.create(KeyUpEvent(**dataclasses.asdict(keyboard_event_spec(ev)[0].get()))),)


# InputEvent: https://developer.mozilla.org/en-US/docs/Web/API/InputEvent
@dataclasses.dataclass
class InputEvent:
    """Represents events that occur when the value of an <input>, <select>, or <textarea> element is changed."""

    data: str = ""  # The inserted or deleted data
    inputType: str = ""  # The type of change (e.g., 'insertText')
    isComposing: bool = False  # True if event is part of IME composition


def input_event_spec(ev: rx.Var[InputEvent]) -> tuple[rx.Var[InputEvent]]:
    return (
        rx.Var.create(
            InputEvent(
                data=ev.data,
                inputType=ev.inputType,
                isComposing=ev.isComposing,
            )
        ),
    )


@dataclasses.dataclass
class BeforeInputEvent(InputEvent):
    """Represents a beforeinput event."""

    pass


def before_input_event_spec(ev: rx.Var[BeforeInputEvent]) -> tuple[rx.Var[BeforeInputEvent]]:
    return (rx.Var.create(BeforeInputEvent(**dataclasses.asdict(input_event_spec(ev)[0].get()))),)


# CompositionEvent: https://developer.mozilla.org/en-US/docs/Web/API/CompositionEvent
@dataclasses.dataclass
class CompositionEvent:
    """Represents events that occur due to the user indirectly entering text (e.g., IME)."""

    data: str = ""  # The characters generated by the input method


def composition_event_spec(ev: rx.Var[CompositionEvent]) -> tuple[rx.Var[CompositionEvent]]:
    return (rx.Var.create(CompositionEvent(data=ev.data)),)


@dataclasses.dataclass
class CompositionEndEvent(CompositionEvent):
    """Represents a compositionend event."""

    pass


def composition_end_event_spec(ev: rx.Var[CompositionEndEvent]) -> tuple[rx.Var[CompositionEndEvent]]:
    return composition_event_spec(ev)


@dataclasses.dataclass
class CompositionStartEvent(CompositionEvent):
    """Represents a compositionstart event."""

    pass


def composition_start_event_spec(ev: rx.Var[CompositionStartEvent]) -> tuple[rx.Var[CompositionStartEvent]]:
    return composition_event_spec(ev)


@dataclasses.dataclass
class CompositionUpdateEvent(CompositionEvent):
    """Represents a compositionupdate event."""

    pass


def composition_update_event_spec(ev: rx.Var[CompositionUpdateEvent]) -> tuple[rx.Var[CompositionUpdateEvent]]:
    return composition_event_spec(ev)
