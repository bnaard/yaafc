import dataclasses

import reflex as rx


# Event: https://developer.mozilla.org/en-US/docs/Web/API/Event
@dataclasses.dataclass
class Event:
    """The base class for all events, representing any event which takes place in the DOM."""

    bubbles: bool = False  # True if the event bubbles up through the DOM
    cancelable: bool = False  # True if the event is cancelable
    composed: bool = False  # True if the event will trigger listeners outside a shadow root
    currentTarget: str = ""  # The current target for the event (serialized as string)
    defaultPrevented: bool = False  # True if preventDefault() was called
    eventPhase: int = 0  # The current phase (1=capturing, 2=at target, 3=bubbling)
    isTrusted: bool = False  # True if the event was generated by a user action
    target: str = ""  # The event target (serialized as string)
    timeStamp: float = 0.0  # The time at which the event was created
    type: str = ""  # The name of the event


def event_spec(ev: rx.Var[Event]) -> tuple[rx.Var[Event]]:
    return (
        rx.Var.create(
            Event(
                bubbles=ev.bubbles,
                cancelable=ev.cancelable,
                composed=ev.composed,
                currentTarget=ev.currentTarget,
                defaultPrevented=ev.defaultPrevented,
                eventPhase=ev.eventPhase,
                isTrusted=ev.isTrusted,
                target=ev.target,
                timeStamp=ev.timeStamp,
                type=ev.type,
            )
        ),
    )


# ProgressEvent: https://developer.mozilla.org/en-US/docs/Web/API/ProgressEvent
@dataclasses.dataclass
class ProgressEvent(Event):
    """Represents events measuring progress of an underlying process (e.g., file upload)."""

    lengthComputable: bool = False  # True if the total size is known
    loaded: int = 0  # Amount of work already performed
    total: int = 0  # Total amount of work to be done


def progress_event_spec(ev: rx.Var[ProgressEvent]) -> tuple[rx.Var[ProgressEvent]]:
    return (
        rx.Var.create(
            ProgressEvent(
                **dataclasses.asdict(event_spec(ev)[0].get()),
                lengthComputable=ev.lengthComputable,
                loaded=ev.loaded,
                total=ev.total,
            )
        ),
    )


# SecurityPolicyViolationEvent: https://developer.mozilla.org/en-US/docs/Web/API/SecurityPolicyViolationEvent
@dataclasses.dataclass
class SecurityPolicyViolationEvent(Event):
    """Represents a securitypolicyviolation event."""

    blockedURI: str = ""
    documentURI: str = ""
    effectiveDirective: str = ""
    originalPolicy: str = ""
    referrer: str = ""
    sourceFile: str = ""
    statusCode: int = 0
    violatedDirective: str = ""
    lineNumber: int = 0
    columnNumber: int = 0


def security_policy_violation_event_spec(
    ev: rx.Var[SecurityPolicyViolationEvent],
) -> tuple[rx.Var[SecurityPolicyViolationEvent]]:
    return (
        rx.Var.create(
            SecurityPolicyViolationEvent(
                **dataclasses.asdict(event_spec(ev)[0].get()),
                blockedURI=ev.blockedURI,
                documentURI=ev.documentURI,
                effectiveDirective=ev.effectiveDirective,
                originalPolicy=ev.originalPolicy,
                referrer=ev.referrer,
                sourceFile=ev.sourceFile,
                statusCode=ev.statusCode,
                violatedDirective=ev.violatedDirective,
                lineNumber=ev.lineNumber,
                columnNumber=ev.columnNumber,
            )
        ),
    )
