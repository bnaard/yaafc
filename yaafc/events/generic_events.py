"""
Generic event dataclasses and event spec functions for DOM event handling.

This module provides Python representations of generic DOM events, including their event spec functions for use with Reflex event handlers.
"""

import dataclasses

import reflex as rx


@dataclasses.dataclass
class Event:
    """
    The base class for all events, representing any event which takes place in the DOM.

    Attributes:
        bubbles (bool): True if the event bubbles up through the DOM
        cancelable (bool): True if the event is cancelable
        composed (bool): True if the event will trigger listeners outside a shadow root
        currentTarget (str): The current target for the event (serialized as string)
        defaultPrevented (bool): True if preventDefault() was called
        eventPhase (int): The current phase (1=capturing, 2=at target, 3=bubbling)
        isTrusted (bool): True if the event was generated by a user action
        target (str): The event target (serialized as string)
        timeStamp (float): The time at which the event was created
        type (str): The name of the event
    """

    bubbles: bool = False
    cancelable: bool = False
    composed: bool = False
    currentTarget: str = ""
    defaultPrevented: bool = False
    eventPhase: int = 0
    isTrusted: bool = False
    target: str = ""
    timeStamp: float = 0.0
    type: str = ""


def event_spec(ev: rx.Var[Event]) -> tuple[rx.Var[Event]]:
    """
    Creates an event specification for the given Event variable.

    Args:
        ev (rx.Var[Event]): The Event variable.

    Returns:
        tuple[rx.Var[Event]]: A tuple containing the event specification.
    """
    return (
        rx.Var.create(
            Event(
                bubbles=ev.bubbles,
                cancelable=ev.cancelable,
                composed=ev.composed,
                currentTarget=ev.currentTarget,
                defaultPrevented=ev.defaultPrevented,
                eventPhase=ev.eventPhase,
                isTrusted=ev.isTrusted,
                target=ev.target,
                timeStamp=ev.timeStamp,
                type=ev.type,
            )
        ),
    )


@dataclasses.dataclass
class ProgressEvent(Event):
    """
    Represents events measuring progress of an underlying process (e.g., file upload).

    Attributes:
        lengthComputable (bool): True if the total size is known
        loaded (int): Amount of work already performed
        total (int): Total amount of work to be done
    """

    lengthComputable: bool = False
    loaded: int = 0
    total: int = 0


def progress_event_spec(ev: rx.Var[ProgressEvent]) -> tuple[rx.Var[ProgressEvent]]:
    """
    Creates a progress event specification for the given ProgressEvent variable.

    Args:
        ev (rx.Var[ProgressEvent]): The ProgressEvent variable.

    Returns:
        tuple[rx.Var[ProgressEvent]]: A tuple containing the progress event specification.
    """
    return (
        rx.Var.create(
            ProgressEvent(
                **dataclasses.asdict(event_spec(ev)[0].get()),
                lengthComputable=ev.lengthComputable,
                loaded=ev.loaded,
                total=ev.total,
            )
        ),
    )


@dataclasses.dataclass
class SecurityPolicyViolationEvent(Event):
    """
    Represents a securitypolicyviolation event.

    Attributes:
        blockedURI (str): The URI of the blocked resource
        documentURI (str): The URI of the document
        effectiveDirective (str): The directive that was violated
        originalPolicy (str): The original policy
        referrer (str): The referrer
        sourceFile (str): The source file
        statusCode (int): The status code
        violatedDirective (str): The violated directive
        lineNumber (int): The line number
        columnNumber (int): The column number
    """

    blockedURI: str = ""
    documentURI: str = ""
    effectiveDirective: str = ""
    originalPolicy: str = ""
    referrer: str = ""
    sourceFile: str = ""
    statusCode: int = 0
    violatedDirective: str = ""
    lineNumber: int = 0
    columnNumber: int = 0


def security_policy_violation_event_spec(
    ev: rx.Var[SecurityPolicyViolationEvent],
) -> tuple[rx.Var[SecurityPolicyViolationEvent]]:
    """
    Creates a security policy violation event specification for the given SecurityPolicyViolationEvent variable.

    Args:
        ev (rx.Var[SecurityPolicyViolationEvent]): The SecurityPolicyViolationEvent variable.

    Returns:
        tuple[rx.Var[SecurityPolicyViolationEvent]]: A tuple containing the security policy violation event specification.
    """
    return (
        rx.Var.create(
            SecurityPolicyViolationEvent(
                **dataclasses.asdict(event_spec(ev)[0].get()),
                blockedURI=ev.blockedURI,
                documentURI=ev.documentURI,
                effectiveDirective=ev.effectiveDirective,
                originalPolicy=ev.originalPolicy,
                referrer=ev.referrer,
                sourceFile=ev.sourceFile,
                statusCode=ev.statusCode,
                violatedDirective=ev.violatedDirective,
                lineNumber=ev.lineNumber,
                columnNumber=ev.columnNumber,
            )
        ),
    )
