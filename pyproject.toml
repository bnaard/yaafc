[project]
name = "yaafc"
version = "0.0.1"
description = "This is a template repository for Python projects that use uv for their dependency management."
authors = [{ name = "Bnaard", email = "bnaard@gmx.net" }]
readme = "README.md"
keywords = ['python']
requires-python = ">=3.10,<4.0"
classifiers = [
    "Intended Audience :: Developers",
    "Programming Language :: Python",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Topic :: Software Development :: Libraries :: Python Modules",
]
dependencies = [
    "arrow>=1.3.0",
    "polars>=1.26.0",
    "reflex>=0.7.10",
    "reflex-intersection-observer>=0.0.8",
]

[project.urls]
Homepage = "https://bnaard.github.io/yaafc/"
Repository = "https://github.com/bnaard/yaafc"
Documentation = "https://bnaard.github.io/yaafc/"

[dependency-groups]
dev = [
    "pytest>=7.2.0",
    "pre-commit>=2.20.0",
    "tox-uv>=1.11.3",
    "deptry>=0.20.0",
    "mypy>=0.991",
    "pytest-cov>=4.0.0",
    "ruff>=0.6.9",
    "mkdocs>=1.4.2",
    "mkdocs-material>=8.5.10",
    "mkdocstrings[python]>=0.26.1",
]

[build-system]
requires = ["setuptools >= 61.0"]
build-backend = "setuptools.build_meta"

[tool.uv]

[tool.poe.tasks]
run.cmd             = "uv run reflex run"
install.sequence    = [ { cmd = "uv sync" }, { cmd = "uv run pre-commit install" } ]
check.sequence      = [ { cmd = "uv lock --locked" }, { cmd = "uv run pre-commit run -a" }, { cmd = "uv run mypy" }, { cmd = "uv run deptry ." } ]
test.cmd            = "uv run python -m pytest --cov --cov-config=pyproject.toml --cov-report=xml"
build.cmd           = "uvx --from build pyproject-build --installer uv"
clean-build.cmd     = "uv run python -c \"import shutil; import os; shutil.rmtree('dist') if os.path.exists('dist') else None\""
docs-test.cmd       = "uv run mkdocs build -s"
docs.cmd            = "uv run mkdocs serve"
docs-deploy.cmd     = "uv run mkdocs gh-deploy"
bump.cmd            = "uv lock --upgrade"
devcrun.cmd         = "podman run -p 3000:3000 -p 8000:8000 yaafc-app" # "podman run -p 3000:3000 -v ${POE_PWD}:/app yaafc-app"
devcrun.cwd         = "${POE_PWD}"
devcbuild.cmd       = "podman build -f ./scripts/Dockerfile.devserver -t yaafc-app ."
pipfreeze.shell     = "uv export --no-hashes --format requirements-txt > requirements.txt"


[tool.setuptools]
py-modules = ["yaafc"]

[tool.mypy]
files = ["yaafc"]
disallow_untyped_defs = true
disallow_any_unimported = true
no_implicit_optional = true
check_untyped_defs = true
warn_return_any = true
warn_unused_ignores = true
show_error_codes = true

[tool.pytest.ini_options]
testpaths = ["tests"]

[tool.ruff]
target-version = "py39"
line-length = 120
fix = true

[tool.ruff.lint]
select = [
    # flake8-2020
    "YTT",
    # flake8-bandit
    "S",
    # flake8-bugbear
    "B",
    # flake8-builtins
    "A",
    # flake8-comprehensions
    "C4",
    # flake8-debugger
    "T10",
    # flake8-simplify
    "SIM",
    # isort
    "I",
    # mccabe
    "C90",
    # pycodestyle
    "E", "W",
    # pyflakes
    "F",
    # pygrep-hooks
    "PGH",
    # pyupgrade
    "UP",
    # ruff
    "RUF",
    # tryceratops
    "TRY",
]
ignore = [
    # LineTooLong
    "E501",
    # DoNotAssignLambda
    "E731",
]

[tool.ruff.lint.per-file-ignores]
"tests/*" = ["S101"]

[tool.ruff.format]
preview = true

[tool.coverage.report]
skip_empty = true

[tool.coverage.run]
branch = true
source = ["yaafc"]
